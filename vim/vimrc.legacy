" other settings see plugin/settings/Settings

let mapleader   = ","
let g:mapleader = ","
set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'

" vim-scripts repos
" Bundle 'matchit.zip'
" Bundle 'Lokaltog/vim-powerline'
Bundle 'bling/vim-airline'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/nerdcommenter'
Bundle 'kien/ctrlp.vim'
Bundle 'tpope/vim-surround'
" Bundle 'vim-scripts/bufexplorer.zip'
Bundle 'vim-scripts/minibufexplorerpp'
" Bundle 'ervandew/supertab'
Bundle 'msanders/snipmate.vim'
" Bundle 'taglist.vim'
Bundle 'sjl/gundo.vim'
" Bundle 'vimwiki'
" Bundle 'colorselector'
" Bundle 'mattn/calendar-vim'
" Bundle 'michaeljsmith/vim-indent-object'
Bundle 'tpope/vim-ragtag'
Bundle 'ap/vim-css-color'
Bundle 'mileszs/ack.vim'
Bundle 'hallison/vim-markdown'
Bundle 'tpope/vim-fugitive'
" Bundle 'Raimondi/delimitMate'
" Bundle 'jistr/vim-nerdtree-tabs'
" Bundle 'tpope/vim-repeat'
Bundle 'godlygeek/tabular'
Bundle 'majutsushi/tagbar'
" Bundle 'Logcat-syntax-highlighter'
" Bundle 'prop.vim'
" Bundle 'javacomplete'
" Bundle 'EasyMotion'
" Bundle 'Shougo/neocomplcache'
" Bundle 'showliu/vbookmark.vim'
Bundle 'klen/python-mode'
Bundle 'darfink/vim-plist'
call vundle#end()
filetype plugin indent on

let g:iswindows = 0
let g:islinux = 0
let g:isgui = 0

if has("gui_running")
  let g:isgui = 1
else
  let g:isgui = 0
endif

if(has("win32") || has("win64") || has("win95") || has("win16"))
  let g:iswindows = 1
else
  let g:islinux = 1
endif

if has('mac')
  let g:isMac = 1
else
  let g:isMac = 0
endif

set guioptions=ce
set antialias
"colorscheme rails_envy
set linespace=2

if has("gui_running")
    set go=aAce              " 去掉难看的工具栏和滑动条
    set transparency=15      " 透明背景
   " #set guifont=M+\ 1mn:h14   " 设置默认字体为monaco
    set guifont=Monaco:h14   " 设置默认字体为monaco
    set showtabline=2        " 开启自带的tab栏
    set columns=140          " 设置宽
    set lines=40             " 设置长
endif

if has("gui_mac")

  "disable IM while leaving insert mode
  "autocmd InsertEnter * set noimdisable
  "autocmd InsertLeave * set imdisable

  " move a line of text using ALT+[jk] or Comamnd+[jk] on mac
  nmap <D-j> mz:m+<cr>`z
  nmap <D-k> mz:m-2<cr>`z
  vmap <D-j> :m'>+<cr>`<my`>mzgv`yo`z
  vmap <D-k> :m'<-2<cr>`>my`<mzgv`yo`z

  " disable default menu hot key
  macmenu &File.New\ Window key=<nop>
  macmenu &File.Close key=<nop>

  " remap cmd + w to close tab
  map <D-w> :tabclose<CR>

  " remap cmd + n to new tab
  map <D-n> :tabnew<CR>

  " map cmd + enter to switch to full screen
  map <D-Enter> :set invfu<CR>

  " map cmd+1~9 to switch tab 1~9
  for i in range(1, 9)
    exec "nnoremap <D-".i."> ".i."gt"
  endfor

endif

if g:iswindows
    source $VIMRUNTIME/delmenu.vim
    source $VIMRUNTIME/menu.vim
    language messages zh_CN.utf-8
endif

if g:iswindows
    source $VIMRUNTIME/mswin.vim
    behave mswin
endif

" 使用GUI界面时的设置
if g:isgui
    " 启动时自动最大化窗口
    if g:iswindows
        au GUIEnter * simalt ~x
    endif
    "winpos 0 0            " 指定窗口出现的位置，坐标原点在屏幕左上角
    "set lines=20 columns=90 " 指定窗口大小，lines为高度，columns为宽度
    set guioptions+=c        " 使用字符提示框
    set guioptions-=m        " 隐藏菜单栏
    set guioptions-=T        " 隐藏工具栏
    set guioptions-=L        " 隐藏左侧滚动条
    set guioptions-=r        " 隐藏右侧滚动条
    set guioptions-=b        " 隐藏底部滚动条
    set showtabline=1        " 隐藏Tab栏
    set cursorline           " 突出显示当前行
endif


set nocompatible                      " not compatible with the old-fashion vi mode
set backspace=2                       " allow backspacing over everything in insert nc >kkmode
set history=1000                      " keep 1000 lines of command line history
set undolevels=100
set ruler                             " show the cursor position all the time
set autoread                          " auto read when file is changed from outside
set wrap
set linebreak
set nolist
set hidden
set linespace=0
set nocursorline
set nofoldenable
set number
set numberwidth=4
set title
set showmode
set nobomb                            " no BOM(Byte Order Mark)
set nostartofline
set laststatus=2
set clipboard+=unnamed
set splitright                        " always open vertical split window in the right side
set nosplitbelow                        " always open horizontal split window below
set scrolloff=5                       " start scrolling when n lines away from margins
set switchbuf=useopen
set wildmode=longest,list             " use emacs-style tab completion when selecting files, etc
set wildmenu                          " make tab completion for files/buffers act like bash
set key=			                        " disable encryption
set synmaxcol=128
set viminfo=			                    " disable .viminfo file
set ttyfast                           " send more chars while redrawing
set cmdheight=2

filetype indent on                    " enable filetype-specific indenting
filetype plugin on                    " enable filetype-specific plugins

syntax on                             " syntax highlight
set hlsearch                          " search highlighting
set incsearch                         " incremental search
syntax enable
set t_Co=256
try
  if (isMac)
    colorscheme jellybeans
  else
    colorscheme molokai
  endif
catch
endtry

set nobackup                          " no *~ backup files
set noswapfile
set nowritebackup
set copyindent                        " copy the previous indentation on autoindenting
set ignorecase                        " ignore case when searching
set smartcase
set smarttab                          " insert tabs on the start of a line according to
set expandtab                         " replace <tab> with spaces
set softtabstop=4
set shiftwidth=2
set tabstop=2
set shortmess=i                       " remove splash wording
set autochdir
set mouse=a
set transparency=15

" disable sound on errors
set visualbell
set noerrorbells
set t_vb=
set tm=500

" file encoding
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,big5,euc-jp,gbk,euc-kr,utf-bom,iso8859-1,euc-jp,utf-16le,latin1
set fenc=utf-8 enc=utf-8 tenc=utf-8
scriptencoding utf-8

" ignores
set wildignore+=*.o,*.obj,*.pyc                " output objects
set wildignore+=*.png,*.jpg,*.gif,*.ico        " image format
set wildignore+=*.swf,*.fla                    " image format
set wildignore+=*.mp3,*.mp4,*.avi,*.mkv        " media format
set wildignore+=*.git*,*.hg*,*.svn*            " version control system
set wildignore+=*sass-cache*
set wildignore+=*.ds_store
set wildignore+=log/**
set wildignore+=tmp/**

" cursorline switched while focus is switched to another split window
"autocmd winenter * setlocal cursorline
autocmd winleave * setlocal nocursorline

" remove tailing whitespace
autocmd bufwritepre * :%s/\s\+$//e
"autocmd bufwritepre * :%s/\s\+$//e


" ======================================
"  custom key and plugin configurations
" ======================================
" space to fold/unfold
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>

" jj replace ESC in insertmode
im jj <ESC>

" Ctrl-j/k/h/l to switch between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()

" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,1000 bd!<cr>


" remap vim 0
map 0 ^

" return current opened file's dirctory
cnoremap %% <c-r>=expand('%:h').'/'<cr>

" time & date map
nmap <leader>da "=strftime("%y/%m/%d")<cr>p"
nmap <leader>ti "=strftime("%h:%m:%s")<cr>p"

" quick open vimrc in a new tab
map  <leader>0  :topleft 100 :split $HOME/.vim/README.md<cr>

" mouse
nmap <leader>sv :set mouse=v<cr>
nmap <leader>sa :set mouse=a<cr>

map  <leader>ta :Tabularize /
nmap <leader>f  :nohlsearch<cr>
nmap <leader>w  :w !sudo tee %<cr>

"insert a space line
nmap <leader>n o<ESC>
set ofu=syntaxcomplete#Complete

" enable / disable paste mode to prevent indent format during copying
nnoremap <F1> :set invpaste paste?<CR>
imap <F1> <C-O>:set invpaste paste?<CR>
set pastetoggle=<F1>

" 格式化json数组
map <C-F6> :%!python -m json.tool<CR>

" ,rm                 一键去除^M字符
noremap <Leader>rm mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

set csprg=/usr/local/bin/cscope
function! Do_CsTag()
    if(executable("cscope") && has("cscope") )
        if(has('win32'))
            silent! execute "!dir /b /s *.c,*.cpp,*.h,*.java,*.cs,*.php,*.py >> cscope.files"
        else
            silent! execute "!find . -name '*.h' -o -name '*.c' -o -name '*.cpp' -o -name '*.m' -o -name '*.mm' -o -name '*.java' -o -name '*.py' -o -name '*.php' > cscope.files"
        endif
        silent! execute "!cscope -b"
        if filereadable("cscope.out")
            execute "cs add cscope.out"
        elseif $CSCOPE_DB != ""
            cs add $CSCOPE_DB
        endif
    endif
endf

if(executable("cscope") && has("cscope"))
    set cscopetag
    set csto=0
    set cscopeverbose
    map <leader>CS :call Do_CsTag()<cr>
    nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
    nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
    nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""
" function for edit ~/_vimrc in new tab
function! SwitchToBuf(filename)
    let bufwinnr = bufwinnr(a:filename)
    if bufwinnr != -1
        exec bufwinnr . "wincmd w"
        return
    else
        tabfirst
        let tab = 1
        while tab <= tabpagenr("$")
            let bufwinnr = bufwinnr(a:filename)
            if bufwinnr != -1
                exec "normal " . tab . "gt"
                exec bufwinnr . "wincmd w"
                return
            endif
            tabnext
            let tab = tab + 1
        endwhile
        " not exist, new tab
        exec "tabnew " . a:filename
    endif
endfunction

" fast edit vimrc file
if g:islinux
    map <silent> <leader>ss :source ~/.vimrc<cr>
    map <silent> <leader>ee :call SwitchToBuf("~/.vimrc")<cr>
    autocmd! bufwritepost .vimrc source ~/.vimrc
elseif g:iswindows
    map <silent> <leader>ss :source ~/_vimrc<cr>
    map <silent> <leader>ee :call SwitchToBuf("~/_vimrc")<cr>
    autocmd! bufwritepost _vimrc source ~/_vimrc
endif

function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("Ack \"" . l:pattern . "\" " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

